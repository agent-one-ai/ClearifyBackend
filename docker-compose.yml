version: '3.9'

services:
  # Nginx reverse proxy con SSL termination
  nginx:
    image: nginx:alpine
    container_name: clearify-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - clearify-network

  # Main FastAPI application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: clearify-backend
    ports:
      - "8000:8000"  # Esponi per accesso diretto dal frontend
    expose:
      - "8000"  # Anche per nginx
    volumes:
      - .:/app
      - /app/__pycache__  # Exclude pycache from volume mount
      - ./certs:/app/certs:ro  # Certificati SSL per l'app
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - ENABLE_HTTPS=false  # Nginx gestisce SSL
      - REDIS_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - REDIS_PASSWORD=${REDIS_PASSWORD:-clearify_redis_2024}
      - CELERY_BROKER_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - CELERY_RESULT_BACKEND=redis://:clearify_redis_2024@redis:6379  # URL completa con password
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - clearify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis STANDARD (esposto per worker esterni)
  redis:
    image: redis:7-alpine
    container_name: clearify-redis
    ports:
      - "192.168.1.108:6379:6379"  # Bind all'IP del server per worker esterni
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-clearify_redis_2024}
    restart: unless-stopped
    networks:
      - clearify-network
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-clearify_redis_2024}
      --appendonly yes
      --bind 0.0.0.0
      --protected-mode yes
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-clearify_redis_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clearify-worker
    command: celery -A app.core.celery_app worker --loglevel=info --queues=text_processing,webhooks,payments,emails --concurrency=4 --hostname=worker-local@%h
    volumes:
      - .:/app
      - ./certs:/app/certs:ro
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - REDIS_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - REDIS_PASSWORD=${REDIS_PASSWORD:-clearify_redis_2024}
      - CELERY_BROKER_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - CELERY_RESULT_BACKEND=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - WORKER_TYPE=local
      - WORKER_LOCATION=main_server
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - clearify-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.core.celery_app inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clearify-beat
    command: celery -A app.core.celery_app beat --loglevel=info
    volumes:
      - .:/app
      - ./certs:/app/certs:ro
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - REDIS_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - REDIS_PASSWORD=${REDIS_PASSWORD:-clearify_redis_2024}
      - CELERY_BROKER_URL=redis://:clearify_redis_2024@redis:6379  # URL completa con password
      - CELERY_RESULT_BACKEND=redis://:clearify_redis_2024@redis:6379  # URL completa con password
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - clearify-network

  # Flower per monitorare Celery (opzionale)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clearify-flower
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-clearify_redis_2024}
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - clearify-network
    profiles:
      - monitoring  # Avvia solo con: docker-compose --profile monitoring up

volumes:
  redis_data:

networks:
  clearify-network:
    driver: bridge