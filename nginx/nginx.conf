# nginx/nginx.conf - CONFIGURAZIONE CORRETTA PER FRONTEND
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # SSL Configuration
    include /etc/nginx/ssl.conf;
    
    # CORS configuration map per gestire multiple origins
    map $http_origin $cors_origin {
        default "";
        "~^https://localhost:3000$" "https://localhost:3000";
        "~^https://127.0.0.1:3000$" "https://127.0.0.1:3000";
        "~^https://clearify.local$" "https://clearify.local";
        "~^http://localhost:3000$" "http://localhost:3000";  # Fallback per dev
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost clearify.local _;
        
        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS Server
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost clearify.local _;
        
        # SSL certificates
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        
        # Client certificate verification (for worker authentication)
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client optional;
        
        # ================================
        # CORS HEADERS GLOBALI
        # ================================
        
        # Gestione CORS per tutte le richieste API
        location /api/ {
            # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type,Authorization,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,X-CSRF-Token,Cookie,X-API-Key' always;
            #                                                                                                                                                                                                                        â†‘ AGGIUNGI QUESTO
            add_header 'Access-Control-Expose-Headers' 'Set-Cookie' always;
            add_header 'Access-Control-Max-Age' 86400 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # CORS headers per richieste normali
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Set-Cookie' always;
            
            # Proxy settings con headers per HTTPS
            proxy_pass http://clearify-backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Headers per cookie cross-origin
            proxy_set_header Cookie $http_cookie;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Health checks (no rate limiting, no CORS needed)
        location /health {
            proxy_pass http://clearify-backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }
        
        # Documentation (development only)
        location /docs {
            proxy_pass http://clearify-backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # OpenAPI JSON
        location /openapi.json {
            proxy_pass http://clearify-backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Root redirect or welcome page
        location / {
            return 200 'Clearify API Gateway - HTTPS Ready';
            add_header Content-Type text/plain;
        }
    }
}